/*
    {{task_name}} Task
    {{task_description}}
*/

/* Includes ----------------------------------------------------------------- */
#include "task/user_task.h"
/* USER INCLUDE BEGIN*/

/* USER INCLUDE END*/

/* Private typedef ---------------------------------------------------------- */
/* Private define ----------------------------------------------------------- */
/* Private macro ------------------------------------------------------------ */
/* Private variables -------------------------------------------------------- */
/* USER STRUCT BEGIN*/

/* USER STRUCT END*/

/* Private function --------------------------------------------------------- */
/* Exported functions ------------------------------------------------------- */
void {{task_function}}(void *argument) {
  (void)argument; /* 未使用argument，消除警告 */

  {% if freq_control %}
  /* 计算任务运行到指定频率需要等待的tick数 */
  const uint32_t delay_tick = osKernelGetTickFreq() / {{task_frequency}};

  osDelay({{task_delay}}); /* 延时一段时间再开启任务 */

  /* USER CODE INIT BEGIN*/

  /* USER CODE INIT END*/

  uint32_t tick = osKernelGetTickCount(); /* 控制任务运行频率的计时 */
  while (1) {
    tick += delay_tick; /* 计算下一个唤醒时刻 */
    /* USER CODE BEGIN */

    /* USER CODE END */
    osDelayUntil(tick); /* 运行结束，等待下一次唤醒 */
  }
  {% else %}
  osDelay({{task_delay}}); /* 延时一段时间再开启任务 */

  /* USER CODE INIT BEGIN*/

  /* USER CODE INIT END*/

  while (1) {
    /* USER CODE BEGIN */

    /* USER CODE END */
  }
  {% endif %}
}